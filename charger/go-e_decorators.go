package charger

// Code generated by github.com/andig/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateGoE(base *GoE, meterEnergy func() (float64, error), chargePhases func(phases int) error) api.Charger {
	switch {
	case chargePhases == nil && meterEnergy == nil:
		return base

	case chargePhases == nil && meterEnergy != nil:
		return &struct {
			*GoE
			api.MeterEnergy
		}{
			GoE: base,
			MeterEnergy: &decorateGoEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargePhases != nil && meterEnergy == nil:
		return &struct {
			*GoE
			api.ChargePhases
		}{
			GoE: base,
			ChargePhases: &decorateGoEChargePhasesImpl{
				chargePhases: chargePhases,
			},
		}

	case chargePhases != nil && meterEnergy != nil:
		return &struct {
			*GoE
			api.ChargePhases
			api.MeterEnergy
		}{
			GoE: base,
			ChargePhases: &decorateGoEChargePhasesImpl{
				chargePhases: chargePhases,
			},
			MeterEnergy: &decorateGoEMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}
	}

	return nil
}

type decorateGoEChargePhasesImpl struct {
	chargePhases func(int) error
}

func (impl *decorateGoEChargePhasesImpl) Phases1p3p(phases int) error {
	return impl.chargePhases(phases)
}

type decorateGoEMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateGoEMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}
