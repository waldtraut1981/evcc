package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateTesla(base *Tesla, meterEnergy func() (float64, error), battery func() (float64, error)) api.Meter {
	switch {
	case battery == nil && meterEnergy == nil:
		return base

	case battery == nil && meterEnergy != nil:
		return &struct {
			*Tesla
			api.MeterEnergy
		}{
			Tesla: base,
			MeterEnergy: &decorateTeslaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case battery != nil && meterEnergy == nil:
		return &struct {
			*Tesla
			api.Battery
		}{
			Tesla: base,
			Battery: &decorateTeslaBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && meterEnergy != nil:
		return &struct {
			*Tesla
			api.Battery
			api.MeterEnergy
		}{
			Tesla: base,
			Battery: &decorateTeslaBatteryImpl{
				battery: battery,
			},
			MeterEnergy: &decorateTeslaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}
	}

	return nil
}

type decorateTeslaBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateTeslaBatteryImpl) SoC() (float64, error) {
	return impl.battery()
}

type decorateTeslaMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateTeslaMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}
